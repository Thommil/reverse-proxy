// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2018-09-06 16:22:15.869514 +0200 CEST m=+6.665342656

package docs

import (
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "Mahali Service API definition",
        "title": "Mahali API",
        "contact": {},
        "license": {},
        "version": "1.0"
    },
    "paths": {
        "/authentication/{provider}": {
            "post": {
                "description": "\u003cdiv\u003eCreates a new JWT token to be used in headers as follow:\u003cbr/\u003e\u003cpre\u003eAuthorization : Bearer {JWT_Token}\u003c/pre\u003e\u003cbr/\u003eThe authentication \u003cb\u003eprovider\u003c/b\u003e is set directly in path.   The model of \u003cb\u003ecredentials\u003c/b\u003e sent in body is based on selected \u003cb\u003eprovider\u003c/b\u003e:\u003cul\u003e\u003cli\u003e\u003ci\u003elocal\u003c/i\u003e : uses the localy stored credentials in Mahali service:\u003c/li\u003e\u003c/ul\u003e\u003cpre\u003e{\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\"username\" : {username},\u003cbr/\u003e\u0026nbsp;\u0026nbsp;\"password\" : {password}\u003cbr/\u003e}\u003c/pre\u003e\u003c/div\u003e",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Authenticate client based on given provider and credentials",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider used for authentication (ex : local, google, facebook ...)",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Depends on provider, see description above for details",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/proto.JWT"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "ApiJWT": []
                    }
                ],
                "description": "\u003cdiv\u003eBy default, without any parameters the full users paginated list is returned.\u003cbr/\u003e\u003cbr/\u003eSearch can be done using criterias directly in the query, in that case, a AND operator is applied:\u003cpre\u003e/users?role=admin\u0026local=fr\u003c/pre\u003e\u003cbr/\u003eFor advanced search, the Mongo Query format is used, see \u003ca href=\"https://docs.mongodb.com/manual/tutorial/query-documents/\"\u003ehere\u003c/a\u003e for details:\u003cpre\u003e/users?query={\"$or\":[{\"role\":\"admin},{\"role\":\"user\"}]}\u003c/pre\u003e\u003c/div\u003e",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a list of users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "The result list start offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "The result size limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The criteria used for sorting (ex: username), prefix with minus for reverse order (ex: -username)",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "The query for custom search (see description for details)",
                        "name": "query",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/api.Result"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "security": [
                    {
                        "ApiJWT": []
                    }
                ],
                "description": "Get a user from her \u003cb\u003eid\u003c/b\u003e. This API can be used to retrieve the current user's profile by using \u003ci\u003eme\u003c/i\u003e parameter as \u003cb\u003eid\u003c/b\u003e.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user from her ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user's ID, set to 'me' for current connected user",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/proto.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiJWT": []
                    }
                ],
                "description": "Update a user from her \u003cb\u003eid\u003c/b\u003e. Only current connected user can be updated if not admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user from her ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The user's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/proto.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/errors.Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/errors.Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Result": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "object"
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "sort": {
                    "type": "string"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "errors.Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "detail": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "proto.JWT": {
            "type": "object",
            "properties": {
                "expires_at": {
                    "type": "integer"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "proto.User": {
            "type": "object",
            "properties": {
                "email_address": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "locale": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "picture": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiJWT": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type s struct{}

func (s *s) ReadDoc() string {
	return doc
}
func init() {
	swag.Register(swag.Name, &s{})
}
